name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.0
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter


jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
    - uses: actions/checkout@v4

    - name: Install sqlx-cli
      run:
        cargo install sqlx-cli
        --version=${{ env.SQLX_VERSION }}
        --features ${{ env.SQLX_FEATURES }}
        --no-default-features
        --locked
        # The --locked flag can be used to force Cargo to use the packaged Cargo.lock file if it is available.
        # This may be useful for ensuring reproducible builds, to use the exact same set of dependencies that were available when the package was published.
        # It may also be useful if a newer version of a dependency is published that no longer builds on your system, or has other problems

    - name: Create app user in Postgres
      run: |
        sudo apt-get install postgresql-client

        # Create the application user
        CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
        PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

        # Grant create db privileges to the app user
        GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
        PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

    - name: Migrate database
      run: |
        SKIP_DOCKER=true ./scripts/init_db.sh


    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run Clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check
      
    - name: Cache cargo-audit
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit (if not cached)
      run: |
        if ! command -v cargo-audit &> /dev/null; then
          cargo install cargo-audit
        fi
    
    - name: Run security audit
      run: cargo audit
    