name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: ^0.8
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: newsletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Install sqlx-cli
      run: |
        cargo install sqlx-cli \
          --version=${{ env.SQLX_VERSION }} \
          --features ${{ env.SQLX_FEATURES }} \
          --no-default-features

    - name: Install PostgreSQL Client
      run: sudo apt-get install -y postgresql-client

    - name: Create app user in Postgres
      run: |
        # Create the application user
        CREATE_QUERY="CREATE USER $APP_USER WITH PASSWORD '$APP_USER_PWD';"
        PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "$CREATE_QUERY"

        # Grant create database privileges
        GRANT_QUERY="ALTER USER $APP_USER CREATEDB;"
        PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "$GRANT_QUERY"

        # Change schema ownership and grant necessary permissions
        SCHEMA_QUERY="ALTER SCHEMA public OWNER TO $APP_USER; GRANT ALL ON SCHEMA public TO $APP_USER;"
        PGPASSWORD="password" psql -U "postgres" -h "localhost" -d "newsletter" -c "$SCHEMA_QUERY"

    - name: Migrate database
      run: SKIP_DOCKER=true ./scripts/init_db.sh

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose
    
    - name: Check that queries are fresh
      run: cargo sqlx prepare --check

    - name: Run Clippy
      run: cargo clippy -- -D warnings

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v2
